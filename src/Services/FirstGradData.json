{
  "w1":{
    "theme":"w",
    "question":"Что такое прогрессивный рендеринг?",
    "answer":"Обобщенное название технологии, которое используется для ускорения отрисовки web-страниц. Основная идея - это как можно раньше указать пользователю визуальный контент. Основная задача - уменьшение времени загрузки.К технологиям прогрессивного рендеринга можно отнести: Линейную загрузку картинок. При отрисовке страницы отображаются только те картинки, которые находятся в видимой области экрана;Приоритизация видимого контента. При этом подходе минимизируют и инкапсулируют стили, разметку и скрипты для той части страницы, которую пользователь увидит первой. Для реализации можно использовать события DOMContentLoaded и load, либо применять отложенные скрипты, чтобы догрузить остальные ресурсы.Асинхронные фрагменты HTML. Идея похожа на SSR (Server Side Rendering). В браузер отправляются HTML страницы, созданные на backend.",
    "codeexample":"",
    "images":[]
  },
  "w2":{
    "theme":"w",
    "question":"Разница между адаптивным (adaptive) и отзывчивым (responsive) дизайнами?",
    "answer":"Адаптивный (adaptive) и отзывчивый (responsive) дизайн — это два подхода к созданию веб-сайтов и приложений, которые могут эффективно работать на устройствах с разными размерами экранов. Несмотря на то, что оба подхода имеют одну цель — улучшить пользовательский опыт на различных устройствах, они достигают этой цели по-разному. Адаптивный дизайн (Adaptive Design). Структура: В адаптивном дизайне создаются несколько фиксированных макетов для различных размеров экранов. Например, один макет для мобильных устройств, другой для планшетов, третий для десктопов. Как работает: Когда пользователь открывает сайт, адаптивный дизайн определяет размер экрана и загружает соответствующий макет. Гибкость: Адаптивный дизайн менее гибок, поскольку макеты создаются заранее и адаптируются только к определённым размерам экранов. Чаще используется в проектах, где требуется более точный контроль над отображением контента на различных устройствах. Отзывчивый дизайн (Responsive Design) Структура: В отзывчивом дизайне используется единый гибкий макет, который адаптируется к любому размеру экрана. Это достигается с помощью медиа-запросов, гибких сеток (flexbox, grid) и относительных единиц измерения (проценты, em, rem). Как работает: Макет автоматически подстраивается под размер экрана в реальном времени, меняя свою структуру и элементы в зависимости от доступного пространства. Гибкость: Отзывчивый дизайн более гибок, так как он не ограничивается фиксированными макетами и плавно адаптируется к любому экрану.",
    "codeexample":"",
    "images":[]
  },
  "w3":{
    "theme":"w",
    "question":"Разница между Progressive Enhancement и Graceful Degradation?",
    "answer":"Оба подхода используются для создания кросс-платформенных и кросс-браузерных интерфейсов. Progressive Enhancement предполагает создание веб-интерфейса от простого к сложному (как вариант сначала создание приложения на мобильном устройстве, потом под планшет, потом десктоп). Graceful Degradation это создание в обратном порядке - от наиболее сложного к более простому (от десктопа к мобильному, или от более современных браузеров к более слабым) Что такое кроссбраузерность? Это корректная адаптивная верстка для правильного отображения сайта в разных браузерах и на разных устройствах. Что такое Babel? Для чего он используется? Babel - это транспайлер, который переписывает код современного стандарта JavaScript на более поздний. Транспайлер - это программа позволяющая менять исходный код одной программы на эквивалентный исходный код на другом языке. Обычно Babel работает на сервере в составе системы сборки JS-кода, например, Webpack. Основная идея использования  Babel, в том, что Ecma International каждый год выпускает обновление для  JavaScript. Однако эти обновления в браузер внедряются  постепенно, чтобы не терять время, а сразу начать использовать новый функционал, который зачастую упрощают разработку используются Babel, которая осуществлять траспиляцию новых конструкций в старые варианты для лучше кроссбраузерности. Конфигураци Babel прописывается в файле babel.config, либо .babelrc для настроек одного пакета, а также указывается в package.json. Разница между feature detection, feature inference и анализом строки user-agent? Все три подхода обозначены для определения браузерных возможностей пользователя. Feature detection или определения возможностей браузера заключается в определении поддерживает ли браузер определенный блок кода и если блок не поддерживается, то будет выполнен аналог или полифил. Такой подход помогает обеспечить работоспособность и предотвратить сбои и ошибки. Пример такого подхода - это библиотека Modernizr. Feature inference или определение возможностей - это проверка на наличие определенных возможностей. Подход примеряет функцию, которая предполагает, что определенная возможность уже существует. User-agent - это строка сообщаемая браузером, которая позволяет определить тип приложения, операционную систему, поставщика программного обеспечения. Доступ к ней можно получить через navigator.userAgent. Следует отметить, что два последних подхода не рекомендовано использовать, так как самым надежным является feature detection.",
    "codeexample":"",
    "images":[]
  },
  "w4":{
    "theme":"w",
    "question":"Разница между layout, painting и compositing?",
    "answer":"Все три этапа относятся к отрисовке веб-страницы. Layout или раскладка - это расчет места для объекта на основе css правил. Painting или отрисовка - это рисование пикселей для отображения визуальных элементов. Сompositing или композиция - это отрисовка слоев в определенном порядке, то есть правильное наложение.",
    "codeexample":"",
    "images":["https://www.researchgate.net/publication/336377602/figure/fig2/AS:812437553037313@1570711615245/The-construction-process-of-render-tree.png"]
  },
  "w5":{
    "theme":"w",
    "question":"Что такое безопасные (Secure) и HttpOnly cookies?",
    "answer":"Безопасные куки отсылаются на сервер только если запросы выполняется по протоколу SSL и HTTPS, однако важные данные никогда не следует передавать или хранить в cookies, поскольку сам их механизм весьма уязвим в отношении безопасности по flag secure никакого дополнительного шифрования или средств защиты не обеспечивает. Начиная с 52 версии в Chrome и FireFox не защищённые сайты с протоколом http не могут создавать куки с флагом secure. Куки HTTP Only недоступны из javascrip через свойство document.cookie и через xml http request, а также request API, что помогает избежать межсайтового скриптинга или XSS. Устанавливать этот флаг можно для тех cookie к которым не требуется обращаться через javascrip в частности если куки используются только для поддержки сеанса то в javascrip они не нужны. Так что в этом случае следует устанавливать флаг http only.",
    "codeexample":"",
    "images":["https://itsecforu.ru/wp-content/uploads/2017/11/1-16.png"]
  },
  "w6":{
    "theme":"w",
    "question":"Что такое Content Security Policy (CSP)?",
    "answer":"CSP - политика безопасности контента. CSP - это http header который позволяет операторам сайта детально контролировать откуда могут быть загружены ресурсы на их сайт. Использование данного заголовка - это лучший способ предотвратить уязвимость межсайтового скриптинга или xss и атаки внедрения данных. CSP является обязательным для всех новых веб-сайтов и настоятельно рекомендуется для всех существующих сайтов с высоким уровнем риска. В случае, если сайт не предоставляет CSP заголовки браузер в свою очередь будет использовать стандартные правила по ограничению домена. Настройка CSP включает в себя добавление на страницу http-заголовка Content Security Policy и его настройку в соответствии со списком доверенных источников из которых пользователь может получать контент.",
    "codeexample":"",
    "images":["https://www.rahulpnath.com/content/images/size/w1384/content-security-policy.png"]
  },
  "w7":{
    "theme":"w",
    "question":"Что такое межсайтовый скриптинг (XSS)?",
    "answer":"Межсайтовый скриптинг или XSS - это довольно распространённая уязвимость которую можно обнаружить на множестве web приложений. Суть довольно проста: злоумышленнику удаётся внедрить на страницу JS код, который не был предусмотрен разработчиками. Этот код будет выполняться каждый раз, когда пользователи будут заходить на страницу приложения, куда этот код был добавлен. Страница, предоставляемая сервером, когда кто-то её запрашивает при этом не изменяется, вместо этого XSS атака использует уязвимость на странице, которая включает переменную отправленную в запрос для отображения в необработанном виде в ответе. Специфика подобных атак заключается в том, что вредоносный код может использовать авторизацию пользователя в веб-системе для получения к ней расширенного доступа или для получения авторизационных данных пользователя.",
    "codeexample":"",
    "images":["https://telegra.ph/file/91d2b78d5464ef6a6e6cb.gif"]
  },
  "w8":{
    "theme":"w",
    "question":"Что Такое API?",
    "answer":"API (Application programming interface) - это интерфейс для взаимодействия между различными программными компонентами. API предоставляет набор функций и протоколов, которые позволяют приложениям общаться друг с другом. Проще говоря, API позволяет одному приложению запрашивать и манипулировать данными или функциями другого приложения или сервиса, что облегчает интеграцию и расширение функциональности без необходимости глубокого понимания внутренней логики других приложений. API часто используется для выполнения базовых операций с данными — создания (Create), чтения (Read), обновления (Update) и удаления (Delete) данных (CRUD-операции). Эти операции реализуются через HTTP-запросы, такие как POST, GET, PUT и DELETE, направленные на определенные URL-адреса.",
    "codeexample":"",
    "images":[]
  },
  "w9":{
    "theme":"w",
    "question":"Что такое CDN?",
    "answer":"CDN (Content delivery network) - это сеть распределенных серверов, которые совместно работают для обеспечения быстрой и надежной доставки контента пользователям. Серверы в CDN расположены в различных географических точках по всему миру и содержат копии статических ресурсов, таких как изображения, видео, стили, скрипты и другие данные. Когда пользователь запрашивает ресурс, CDN перенаправляет запрос на ближайший сервер к пользователю. Это минимизирует задержку и ускоряет время загрузки страницы. Децентрализованная структура позволяет избежать перегрузок и снижает риски отказа в случае выхода из строя одного из серверов.",
    "codeexample":"",
    "images":[]
  },
  "w10":{
    "theme":"w",
    "question":"Что такое REST?",
    "answer":"REpresentational State Transfer то есть передача состояния представления - это архитектурный стиль взаимодействия компонентов распределённого приложения. В сети rest представляет собой согласованный набор ограничений, учитываемых при проектировании распределённой гипермедиасистемы. В определённых случаях, такие как например интернет-магазины, поисковые системы и прочие системы, основанные на данных, это приводит к повышению производительности и упрощению архитектуры. В общем случае rest является очень простым интерфейсом управления информацией без использования каких-то дополнительных внутренних прослоек. Каждая единица информации однозначно определяется глобальным идентификатором таким как URL, а каждый URL свою очередь имеет строго заданный формат. ",
    "codeexample":"",
    "images":[]
  },
  "w11":{
    "theme":"w",
    "question":"Назовите критические этапы рендеринга?",
    "answer":"Критические этапы рендеринга или critical rendering pass - это последовательность шагов, которую выполняет браузер, когда HTML, CSS и JavaScript преобразуются в пиксели, которые видны на экране. Самый полный и последовательный список основных шагов выглядит следующим образом: Document Object Model - ответ в виде HTML превращается в токены, которые в свою очередь превращаются в узлы и в последующем формируют DOM дерево. Css Object Mode или CSSOM: если html документ содержит стили, то припасинге они запрашиваются и участвуют в построении CSSOM, который содержит все стили страницы, то есть данные о том, как стилизовать DOM.  JavaScript - если html-документ содержит тег script, то происходит либо исполнение этого скрипта, либо запрос и исполнение сторонних подключенных скриптов. JavaScript в свою очередь может модифицировать DOM дерево. Следующий шаг - это Accessibility Tree при парсинге HTML анализируются специальное атрибуты по типу roll и area, в результате чего происходит построение так называемого дерева доступности, которое в последующем может использоваться скринридерами. Render Tree: на данном этапе происходит объединение DOM и CSSOM или объектной модели документа и ассоциированных стилей каждого элемента. Для построения дерева рендера браузер проверяет каждый узел DOM, начиная от корневого, и определяет, какие CSS правила нужно присоединить к этому узлу. Дерево рендера охватывает только видимое содержимое. Layout/Reflow - в тот момент, когда дерево рендера построено, становится возможным этап компоновки или layout. Этот этап определяет, где и как на странице будут позиционированы элементы, и каковы связи между элементами. Другими словами на основании размеров элемента определяется его положение. Первый шаг, как уже было сказано, называется layout, все последующие шаги, связанные с пересчётами размеров называются reflow. Paint/Repaint: когда дерево рендера создано, компоновка произошла, пиксели могут быть отрисованы. Если говорить просто, то на этом этапе происходит покраска веб-страницы согласно заданным стилям, первая покраска называется paint все последующие перекраски называются repaint. Compositing: заключительный шаг, когда готовые спозиционированные элементы выстраиваются друг относительно друга по уровням или потокам по умолчанию все элементы на странице идут в главном или в основном потоке, однако задание определённых CSS свойств может вырвать их из основного потока и сформировать новый. На этапе compositing элементы в разных потоках выстраиваются друг относительно друга.",
    "codeexample":"",
    "images":[]
  },
  "w12":{
    "theme":"w",
    "question":"Разница между композицией и наследованием?",
    "answer":"Наследование - это концепция ООП, когда один класс наследует поля и методы другого класса, что обеспечивает возможность повторного использования кода. Предполагает тесную взаимосвязь между компонентами: производные компоненты должны наследовать свойства базового компонента, что сильно усложняет модификацию конкретного компонента. Композиция - это ещё одна концепция ООП, но в отличии от наследования, расширяемый класс ссылается на экземпляры другого класса. Предполагает наследование поведения,а не свойств, что существенно облегчает добавление новых свойств в конкретный компонент. Компоненты по возможности должны быть переиспользуемыми. Тесная связь наследующих компонентов делает их зависимыми от специфики реализации приложения в котором они используются. Композиция делает связи между компонентами слабыми, что повышает их автономность.",
    "codeexample":"",
    "images":["https://habrastorage.org/webt/-t/cv/aa/-tcvaa8gtnipg_ridjunpf9b1tu.gif","https://habrastorage.org/webt/qj/jo/mg/qjjomgocinjckd5kxjmubl1gzqc.gif"]
  },
  "w13":{
    "theme":"w",
    "question":"Какие принципы можно использовать вместе с наследованием?",
    "answer":"Есть ещё три важных принципа ООП которые можно использовать совместно с наследованием - это делегация, или поручение задачи от внешнего объекта к внутреннему, композиция- включение объектом контейнером объекта содержимого и управление его поведением, причём последний не может существовать вне первого и агрегация - включение объектом контейнером ссылки на объект содержимое при уничтожении первого последний продолжает существование.",
    "codeexample":"",
    "images":[]
  },
  "w14":{
    "theme":"w",
    "question":"Основные принципы ООП?",
    "answer":"ООП (объектно-ориентированный подход программирования) базируется на 4 основных принципах: Абстракция - это отделение концепции от реализации. Основная идея состоит в том, чтобы представить объект минимальным объемом полей и методов для решения поставленной задачи. Наследование - это способность объекта или класса базироваться на другом объекте или классе. Это главный механизм для повторного использования кода, т.е при наследовании класса поток получает все методы и свойства класса родителя, при условии, что данные методы и свойство не являются приватными. Инкапсуляция - это размещение одного объекта или класса внутри другого для разграничения доступа к ним. Полиморфизм - это реализация задач одной и той же идеи разными способами.",
    "codeexample":"",
    "images":["https://static.tildacdn.com/tild6365-3832-4464-b861-623030313631/scale_1200.png"]
  },
  "w15":{
    "theme":"w",
    "question":"Что такое CDN?",
    "answer":"CDN (Content delivery network) - это сеть распределенных серверов, которые совместно работают для обеспечения быстрой и надежной доставки контента пользователям. Серверы в CDN расположены в различных географических точках по всему миру и содержат копии статических ресурсов, таких как изображения, видео, стили, скрипты и другие данные. Когда пользователь запрашивает ресурс, CDN перенаправляет запрос на ближайший сервер к пользователю. Это минимизирует задержку и ускоряет время загрузки страницы. Децентрализованная структура позволяет избежать перегрузок и снижает риски отказа в случае выхода из строя одного из серверов.",
    "codeexample":"",
    "images":[]
  },
  "w16":{
    "theme":"w",
    "question":"Что такое CDN?",
    "answer":"CDN (Content delivery network) - это сеть распределенных серверов, которые совместно работают для обеспечения быстрой и надежной доставки контента пользователям. Серверы в CDN расположены в различных географических точках по всему миру и содержат копии статических ресурсов, таких как изображения, видео, стили, скрипты и другие данные. Когда пользователь запрашивает ресурс, CDN перенаправляет запрос на ближайший сервер к пользователю. Это минимизирует задержку и ускоряет время загрузки страницы. Децентрализованная структура позволяет избежать перегрузок и снижает риски отказа в случае выхода из строя одного из серверов.",
    "codeexample":"",
    "images":[]
  },
  "w17":{
    "theme":"w",
    "question":"Что такое CDN?",
    "answer":"CDN (Content delivery network) - это сеть распределенных серверов, которые совместно работают для обеспечения быстрой и надежной доставки контента пользователям. Серверы в CDN расположены в различных географических точках по всему миру и содержат копии статических ресурсов, таких как изображения, видео, стили, скрипты и другие данные. Когда пользователь запрашивает ресурс, CDN перенаправляет запрос на ближайший сервер к пользователю. Это минимизирует задержку и ускоряет время загрузки страницы. Децентрализованная структура позволяет избежать перегрузок и снижает риски отказа в случае выхода из строя одного из серверов.",
    "codeexample":"",
    "images":[]
  },
  "w18":{
    "theme":"w",
    "question":"Что такое CDN?",
    "answer":"CDN (Content delivery network) - это сеть распределенных серверов, которые совместно работают для обеспечения быстрой и надежной доставки контента пользователям. Серверы в CDN расположены в различных географических точках по всему миру и содержат копии статических ресурсов, таких как изображения, видео, стили, скрипты и другие данные. Когда пользователь запрашивает ресурс, CDN перенаправляет запрос на ближайший сервер к пользователю. Это минимизирует задержку и ускоряет время загрузки страницы. Децентрализованная структура позволяет избежать перегрузок и снижает риски отказа в случае выхода из строя одного из серверов.",
    "codeexample":"",
    "images":[]
  },
  "h19":{
    "theme":"h",
    "question":"Что такое HTML и для чего он нужен?",
    "answer":"Это язык гипертекстовой разметки (HyperText Markup Language). Это стандартизированный язык, позволяющий создавать веб-страницы. Он интерпретируется браузером и отображается в виде структуры и содержания на веб-странице.",
    "codeexample":"",
    "images":[]
  },
  "h20":{
    "theme":"h",
    "question":"Какие глобальные атрибуты есть в HTML?",
    "answer":"В HTML есть категория атрибутов, которые можно применять практически к любому тегу. Самый яркий пример глобального атрибута - это class, с помощью него можно осуществлять поиск или стилизацию элемента. В качестве значения он принимает строку. class может быть задан абсолютно любому тегу. contenteditable делает любой элемент на странице  редактируемым, в качестве значения для атрибута используются булевы значения true или false. data* - это группа атрибутов, позволяющая перекидывать данные между HTML и DOM часто используется для взаимодействия с HTML при помощи javascript. hidden не требует явного указания значения, наличие атрибута само по себе означает состояние true. Прячет на странице любой HTML-элемент, причём элемент не виден не только для глаз пользователя, но и для скридеров. spellcheck - с помощью этого атрибута можно указать браузеру, что в элементе, которому он задан, нужно проверить правописание. tabindex указывает браузеру нужно ли видеть этот элемент при навигации по странице с помощью клавиатуры, часто используется для не интерактивных элементов, значение - отрицательное или положительное целое число.",
    "codeexample":"",
    "images":[]
  },
  "h21":{
    "theme":"h",
    "question":"Что такое категории контента в HTML5?",
    "answer":"Каждый элемент HTML принадлежит к некоторому количеству категорий контента которые объединяют элементы с общим набором характеристик. Такая группировка является свободной, то есть на самом деле не задаёт отношения между элементами таких типов, а помогает определить и описать их поведения и правила, которым они должны следовать, особенно когда дело доходит до сложных деталейю Также возможна ситуация когда элемент не входит ни в одну из этих категорий. Существует три основных типа категорий контента - это основные категории контента описывающие общие для многих элементов правила, категории контента для элементов форм описывающие общее правило для элементов форм, особые категории контента описывающие редкие категории актуальные только для нескольких элементов, возможно лишь в особом контексте.",
    "codeexample":"",
    "images":["https://html5book.ru/wp-content/uploads/2017/02/html5_content-model.png"]
  },
  "h22":{
    "theme":"h",
    "question":"Какие категории считаются основными категориями контента?",
    "answer":"К основным категориям контента относятся: Метаданные - это элементы, принадлежащие категории метаданных. Они изменяют отображение или поведение HTML документа, связывают его с другими документами и предоставляют другую дополнительную информацию; Потоковый контент - это элементы основного потока который обычно содержит текст и встроенный контент; Секционный контент - подобные элементы создают глобальные секции в текущей структуре документа, определяющие область действия заголовочного контента и элементов header и footer; Заголовочный контент - определяет заголовок секции явно отмеченной структурным элементом или не явно самим заголовочным элементом; Фразовый контент - определяет текст и его формат серии фразового контента образуют параграфы; Встроенный контент - импортирует документ в другой ресурс или вставляет содержимое на другом языке разметки или принадлежащее другому пространству имён; Интерактивный контент - это элементы которые специально разработаны для взаимодействия с пользователем; Явный контент - это контент который считается явным, когда он не скрыт и не является пустым, это контент который непосредственно отображён на странице. У элементов потокового или фразового контента должен быть хотя бы один явный узел. Контент форм - он включает в себя элементы, владельцем которых обычно является форма или тег форм.",
    "codeexample":"",
    "images":[]},
  "c23":{
    "theme":"c",
    "question":"Что такое CSS? И для чего он используется?",
    "answer":"CSS (Cascading Style Sheets - каскадные таблицы стилей) — это язык стилей, используемый для описания внешнего вида и форматирования документов, написанных на HTML. То есть предназначены для добавления стилей на веб-страницу",
    "codeexample":"",
    "images":[]
  },
  "j24":{
    "theme":"j",
    "question":"Типы данных в JavaScript?",
    "answer":"8 основных типов: строка, число, bigint, boolean, Symbol(), Object(), null, undefined.",
    "codeexample":"",
    "images":[]
  },
  "r25":{
    "theme":"r",
    "question":"Что такое React?",
    "answer":"React - это JavaScript библиотека с открытым исходным кодом, разработанная компанией Facebook. Он предназначен для создания пользовательских интерфейсов. React отвечает за слой представление, то есть vue, в мобильных и веб-приложениях. Основная философия - это компонентный подход, то есть весь интерфейс может быть разбит на минимальные функционирующие единицы -компоненты. Переиспользуя такие компоненты в других местах приложения можно в разы ускорить разработку.",
    "codeexample":"",
    "images":[]
  }
}